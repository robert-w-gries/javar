PARSER_BEGIN(MiniJavaParser)
package parser;

import java.util.LinkedList;
import Absyn.*;
import java.io.*;

public class MiniJavaParser {

	public static void main(String[] args) {
		PrintVisitor visitor = new PrintVisitor();

		try {
			MiniJavaParser parser = new MiniJavaParser(new FileReader(args[0]));
		} catch (IOException e) {
			System.err.println(e.getMessage());
		}

		try {
			visitor.visit(Goal());
		} catch (ParseException e) {
			System.err.println(e.getMessage());
		}
	}
} 
PARSER_END(MiniJavaParser)

/**************************************************
 * The MiniJava language lexical spec starts here *
 **************************************************/

TOKEN_MGR_DECLS :
{
    static boolean anyErrors = false;
    static void error(String msg) {
        anyErrors = true;
	System.err.println(msg + ": line " + input_stream.getEndLine()
			   + ", column " + input_stream.getEndColumn());
    }
}

/* WHITE SPACE */

SKIP :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* RESERVED WORDS, OPERATORS, etc  */

TOKEN : 
{
  < "(" >
| < ")" >
| < "[" >
| < "]" >
| < "{" >
| < "}" >
| < "." >
| < "-" >
| < "!" >
| < "*" >
| < "/" >
| < "+" >
| < "<" >
| < ">" >
| < "=" >
| < "==" >
| < "!=" >
| < "&&" >
| < "||" >
| < "," >
| < ";" >
| < "public" >
| < "static" >
| < "void" >
| < "main" >
| < "String" >
| < "class" >
| < "extends" >
| < "Thread" >
| < "synchronized" >
| < "return" >
| < "if" >
| < "else" >
| < "while" >
| < "Xinu" >
| < "true" >
| < "false" >
| < "this" >
| < "null" >
| < "new" >
| < "int" >
| < "boolean" >
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* LITERALS */

TOKEN :
{
  < INT: ( ["1"-"9"] (["0"-"9"])* | "0" )  >
| < OCT: ( "0"["0"-"7"] (["0"-"7"])* ) >
| < HEX: ( "0x"(["0"-"9"]|["A"-"F"]|["a"-"f"]) (["0"-"9"]|["A"-"F"]|["a"-"f"])*) >

| < STRING:
 "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < ID: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER: ["A"-"Z","a"-"z","_","$"] >
| < #DIGIT: ["0"-"9"] >
}

<DEFAULT>
SKIP :
{
   <~[]> { error("Illegal token"); }
}

/**************************************************
 * The MiniJava language grammar starts here      *
 **************************************************/

// Goal ::= MainClassDeclaration ( ClassDeclaration | ThreadDeclaration )* <EOF>
Program Goal() : {
	// Variable declarations go here
	LinkedList<ClassDecl> classList = new LinkedList<ClassDecl>();
} {
	MainClassDeclaration(classList) 
	( LOOKAHEAD(4) ClassDeclaration(classList) | ThreadDeclaration(classList) )*
	<EOF>
	
	{ return new Program(classList); }
}

// ClassName ::= "class" <ID>
String ClassName() : {
	Token className;
} {
	"class" className = <ID>
	
	{ return className.image; }
}

// MainClassDeclaration ::=	ClassName "{" "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")" "{" ( VarDeclaration )* ( Statement )* "}" "}"
void MainClassDeclaration(LinkedList<ClassDecl> classList) : {
	String name;
	Token argsId;
	LinkedList<VarDecl> localsList = new LinkedList<VarDecl>();
	LinkedList<Stmt> statements = new LinkedList<Stmt>();
} {
	name = ClassName() "{"
		"public" "static" "void" "main" "(" "String" "[" "]" argsId = <ID> ")" "{"
			( LOOKAHEAD(3) VarDeclaration(localsList) )*
			( Statement(statements) )*
		"}"
	"}"
	
	{
		LinkedList<MethodDecl> methods = new LinkedList<MethodDecl>();
		LinkedList<Formal> params = new LinkedList<Formal>();
		Formal args = new Formal(new ArrayType(new IdentifierType("String")), argsId.image);
		params.add(args);
		IdentifierType pub_stat_void = new IdentifierType("public_static_void");
		MethodDecl mainMethod = new MethodDecl(pub_stat_void, false, "main", params, localsList, statements, new IntegerLiteral(0));
		methods.add(mainMethod);
		classList.add(new ClassDecl(name, null, new LinkedList<VarDecl>(), methods));
	}
}

// ClassDeclaration	::=	ClassName ( "extends" <ID> )? "{" ( FieldDeclaration | MethodDeclaration | VoidDeclaration )* "}"
void ClassDeclaration(LinkedList<ClassDecl> classList) : {
	String name;
	Token parent = null;
	LinkedList<VarDecl> fields = new LinkedList<VarDecl>();
	LinkedList<MethodDecl> methods = new LinkedList<MethodDecl>();
} {
	name = ClassName() [ "extends" parent = <ID> ] "{"
		( FieldDeclaration(fields) | LOOKAHEAD(2) MethodDeclaration(methods) | VoidDeclaration(methods) )*
	"}"
	
	{ classList.add(new ClassDecl(name, parent == null ? null : parent.image, fields, methods)); }
}

// ThreadDeclaration ::= ClassName "extends" "Thread" "{" ( FieldDeclaration | MethodDeclaration | VoidDeclaration )* "}"
void ThreadDeclaration(LinkedList<ClassDecl> classList) : {
	String name;
	LinkedList<VarDecl> fields = new LinkedList<VarDecl>();
	LinkedList<MethodDecl> methods = new LinkedList<MethodDecl>();
} {
	name = ClassName() "extends" "Thread" "{"
		( FieldDeclaration(fields) | LOOKAHEAD(2) MethodDeclaration(methods) | VoidDeclaration(methods) )*
	"}"
	
	{ classList.add(new ThreadDecl(name, fields, methods)); }
}

// VarDeclaration ::= Type <ID> ( "=" Expression )? ";"
void VarDeclaration(LinkedList<VarDecl> vars) : {
	Type type;
	Token id;
	Expr init = null;
} {
	type = Type() id = <ID> [ "=" init = Expression() ] ";"
	
	{ vars.add(new VarDecl(type, id.image, init)); }
}

// MethodDeclaration ::= "public" Type <ID> "(" ( "synchronized" )? ( Type <ID> ( "," Type <ID> )* )? ")" "{" ( VarDeclaration )* ( Statement )* "return" Expression ";" "}"
void MethodDeclaration(LinkedList<MethodDecl> methods) : {
	Type returnType;
	Token id;
	boolean sync = false;
	Type paramType;
	Token paramId;
	LinkedList<Formal> params = new LinkedList<Formal>();
	LinkedList<VarDecl> locals = new LinkedList<VarDecl>();
	LinkedList<Stmt> statements = new LinkedList<Stmt>();
	Expr returnVal;
} {
	"public" returnType = Type() id = <ID> "(" [ "synchronized" { sync = true; } ] 
		[ paramType = Type() paramId = <ID> { params.add(new Formal(paramType, paramId.image)); }
		( "," paramType = Type() paramId = <ID> { params.add(new Formal(paramType, paramId.image)); } )* ] ")" "{"
		( LOOKAHEAD(2) VarDeclaration(locals) )*
		( Statement(statements) )*
		"return" returnVal = Expression() ";"
	"}"
	
	{ methods.add(new MethodDecl(returnType, sync, id.image, params, locals, statements, returnVal)); }
}

// VoidDeclaration ::= "public" "void" <ID> "(" ")" "{" ( VarDeclaration )* ( Statement )* "}"
void VoidDeclaration(LinkedList<MethodDecl> methods) : {
	Token id;
	LinkedList<VarDecl> locals = new LinkedList<VarDecl>();
	LinkedList<Stmt> statements = new LinkedList<Stmt>();
} {
	"public" "void" id = <ID> "(" ")" "{"
		( LOOKAHEAD(2) VarDeclaration(locals) )*
		( Statement(statements) )*
	"}"
	
	{ methods.add(new VoidDecl(id.image, locals, statements)); }
}

// FieldDeclaration ::= Type <ID> ";"
void FieldDeclaration(LinkedList<VarDecl> fields) : {
	Type type;
	Token id;
} {
	type = Type() id = <ID> ";"
	
	{ fields.add(new VarDecl(type, id.image, null)); }
}

// Type ::= <ID> ( "[" "]" )*
//      |   "boolean" ( "[" "]" )*
//      |   "int" ( "[" "]" )*
Type Type() : {
	Token id = null;
	int dimensions = 0;
	boolean isBool = false, isInt = false;
} {
	( id = <ID> | "boolean" { isBool = true; } | "int" { isInt = true; } )
	( LOOKAHEAD(2) "[" "]" { dimensions++; } )*
	
	{
		Type t;
		if (isBool) t = new BooleanType();
		else if (isInt) t = new IntegerType();
		else t = new IdentifierType(id.image);
		for (int i = 0; i < dimensions; ++i) {
			t = new ArrayType(t);
		}
		return t;
	}
}

// Statement ::= "{" ( Statement )* "}"
//           |   "if" "(" Expression ")" Statement ( "else" Statement )?
//           |   "while" "(" Expression ")" Statement
//           |   "Xinu" "." <ID> "(" ( Expression ( "," Expression )* )? ")" ";"
//           |   Expression "=" Expression ";"
void Statement(LinkedList<Stmt> statements) : {
	LinkedList<Stmt> innerStatements = new LinkedList<Stmt>();
	Expr innerExpr1 = null, innerExpr2 = null;
	LinkedList<Expr> innerExpressions = new LinkedList<Expr>();
	Token xinuId = null;
	String type;
} {
	( "{" ( Statement(innerStatements) )* "}" { type = "block"; }
	| "if" "(" innerExpr1 = Expression() ")" Statement(innerStatements) [ LOOKAHEAD(2) "else" Statement(innerStatements) ] { type = "if"; }
	| "while" "(" innerExpr1 = Expression() ")" Statement(innerStatements) { type = "while"; }
	| LOOKAHEAD(3) "Xinu" "." xinuId = <ID> MethodCall(innerExpressions) ";" { type = "xinu"; }
	| innerExpr1 = AssignableExpression() "=" innerExpr2 = Expression() ";" { type = "assign"; } )
	
	{
		if (type.equals("block")) statements.add(new BlockStmt(innerStatements));
		else if (type.equals("if")) {
			if (innerStatements.size() == 1) statements.add(new IfStmt(innerExpr1, innerStatements.get(0), null));
			else statements.add(new IfStmt(innerExpr1, innerStatements.get(0), innerStatements.get(1)));
		} else if (type.equals("while")) statements.add(new WhileStmt(innerExpr1, statements.get(0)));
		else if (type.equals("xinu")) statements.add(new XinuCallStmt(xinuId.image, innerExpressions));
		else if (type.equals("assign")) statements.add(new AssignStmt((AssignableExpr)innerExpr1, innerExpr2));
	}
}

// Expression ::= Expression1 ( "||" Expression1 )*
Expr Expression() : {
	Expr left, right = null;
	LinkedList<Expr> exprs = new LinkedList<Expr>();
} {
	left = Expression1() ( "||" right = Expression1() { exprs.add(right); } )*
	
	{
		for (Expr expr : exprs) {
			left = new OrExpr(left, right);
		}
		return left;
	}
}

// Expression1 ::= Expression2 ( "&&" Expression2 )*
Expr Expression1() : {
	Expr left, right = null;
	LinkedList<Expr> exprs = new LinkedList<Expr>();
} {
	left = Expression2() ( "&&" right = Expression2() { exprs.add(right); } )*

    {
    	for (Expr expr : exprs) {
    		left = new AndExpr(left, right);
    	}
    	return left;
    }
}

// Expression2 ::= Expression3 ( "==" Expression3 )*
//			   |   Expression3 ( "!=" Expression3 )*
Expr Expression2() : {
	Expr left, right = null;
	LinkedList<Expr> exprs = new LinkedList<Expr>();
	LinkedList<String> types = new LinkedList<String>();
} {
	left = Expression3()
	( "==" right = Expression3() { exprs.add(right); types.add("equal"); }
	| "!=" right = Expression3() { exprs.add(right); types.add("notequal"); } )*

    {
    	for (int i = 0; i < exprs.size(); ++i) {
    		if (types.get(i).equals("equal")) {
    			left = new EqualExpr(left, right);
    		} else if (types.get(i).equals("notequal")) {
    			left = new NotEqExpr(left, right);
    		}
    	}
    	return left;
    }
}

// Expression3 ::= Expression4 ( "<" Expression4 )*
//			   |   Expression4 ( ">" Expression4 )*
Expr Expression3() : {
	Expr left, right = null;
    LinkedList<Expr> exprs = new LinkedList<Expr>();
    LinkedList<String> types = new LinkedList<String>();
} {
	left = Expression4()
	( "<" right = Expression4() { exprs.add(right); types.add("less"); }
	| ">" right = Expression4() { exprs.add(right); types.add("greater"); } )*

    {
    	for (int i = 0; i < exprs.size(); ++i) {
    		if (types.get(i).equals("less")) {
    			left = new LesserExpr(left, right);
    		} else if (types.get(i).equals("greater")) {
    			left = new GreaterExpr(left, right);
    		}
    	}
    	return left;
    }
}

// Expression4 ::= Expression5 ( "+" Expression5 )*
//			   |   Expression5 ( "-" Expression5 )*
Expr Expression4() : {
	Expr left, right = null;
    LinkedList<Expr> exprs = new LinkedList<Expr>();
    LinkedList<String> types = new LinkedList<String>();
} {
	left = Expression5()
	( "+" right = Expression5() { exprs.add(right); types.add("plus"); }
	| "-" right = Expression5() { exprs.add(right); types.add("minus"); } )*

    {
    	for (int i = 0; i < exprs.size(); ++i) {
    		if (types.get(i).equals("plus")) {
    			left = new AddExpr(left, right);
    		} else if (types.get(i).equals("minus")) {
    			left = new SubExpr(left, right);
    		}
    	}
    	return left;
    }
}

// Expression5 ::= Expression6 ( "*" Expression6 )*
//			   |   Expression6 ( "/" Expression6 )*
Expr Expression5() : {
	Expr left, right = null;
    LinkedList<Expr> exprs = new LinkedList<Expr>();
    LinkedList<String> types = new LinkedList<String>();
} {
	left = Expression6()
	( "*" right = Expression6() { exprs.add(right); types.add("times"); }
	| "/" right = Expression6() { exprs.add(right); types.add("div"); } )*

    {
    	for (int i = 0; i < exprs.size(); ++i) {
    		if (types.get(i).equals("times")) {
    			left = new MulExpr(left, right);
    		} else if (types.get(i).equals("div")) {
    			left = new DivExpr(left, right);
    		}
    	}
    	return left;
    }
}

// Expression6 ::=	( "-" )+ DotExpression
//             |	( "!" )+ DotExpression
//             |   DotExpression
Expr Expression6() : {
	Expr expr;
    LinkedList<String> types = new LinkedList<String>();
} {
	( LOOKAHEAD(2) "-" { types.add("neg"); } | "!" { types.add("not"); } )*
	expr = DotExpression()
	
	{
		for (String type : types) {
			if (type.equals("neg")) expr = new NegExpr(expr);
			else if (type.equals("not")) expr = new NotExpr(expr);
		}
		return expr;
	}
}

// DotExpression ::= Expression7 ( "." <ID> ( MethodCall )? )*
Expr DotExpression() : {
	Expr left;
	Token id = null;
	LinkedList<Token> ids = new LinkedList<Token>();
	LinkedList<LinkedList<Expr>> paramses = new LinkedList<LinkedList<Expr>>();
} {
	left = Expression7() ( LOOKAHEAD(2) "." id = <ID> { ids.add(id); paramses.add(new LinkedList<Expr>()); }
		[ MethodCall(paramses.getLast()) ] )*

	{
		for (int i = 0; i < ids.size(); ++i) {
			if (paramses.get(i).size() == 0) {
				left = new FieldExpr(left, ids.get(i).image);
			} else {
				left = new CallExpr(left, ids.get(i).image, paramses.get(i));
			}
		}
		return left;
	}
}

// Expression7 ::=	Expression8 ( "[" Expression "]" )*
//             |    "(" Expression ")"
Expr Expression7() : {
	Expr left;
} {
	( LOOKAHEAD(3) left = ArrayExpression()
	| "(" left = Expression() ")"
	| left = Expression8() )
	
	{
		return left;
	}
}

Expr ArrayExpression() : {
	Expr left, right = null;
	LinkedList<Expr> exprs = new LinkedList<Expr>();
} {
	left = Expression8() ( "[" right = Expression() { exprs.add(right); } "]" )+

	{
    	for (Expr expr : exprs) {
    		left = new ArrayExpr(left, expr);
    	}
    	return left;
    }
}

// MethodCall ::= "(" ( Expression ( "," Expression )* )? ")"
void MethodCall(LinkedList<Expr> exprs) : {
	Expr expr;
} {
	"(" [ expr = Expression() { exprs.add(expr); } ( "," expr = Expression() { exprs.add(expr); } )* ] ")"
}

// Expression8 ::=	NewDecl "(" ")"
//             |    NewDecl "[" Expression "]" ( "[" "]" )*
//             |	"Xinu" "." <ID> "(" ( Expression ( "," Expression )* )? ")"
//             |	<ID>
//             |	<INT>
//             |	<STRING>
//             |	"true"
//             |	"false"
//             |	"this"
//             |	"null"
Expr Expression8() : {
	Type type = null;
	Expr expr = null;
	Token xinuId = null;
	LinkedList<Expr> exprs = new LinkedList<Expr>();
	Token terminal = null;
	String exprType;
} {
	( LOOKAHEAD(3) type = NewDecl() "(" ")" { exprType = "newobj"; }
	| LOOKAHEAD(3) type = NewDecl() "[" ( expr = Expression() { exprs.add(expr); } ) "]" ( LOOKAHEAD(2) "[" "]" )* { exprType = "newarr"; }
	| "Xinu" "." xinuId = <ID> MethodCall(exprs) { exprType = "xinu"; }
	| terminal = <ID> { exprType = "id"; }
	| terminal = <INT> { exprType = "int"; }
	| terminal = <STRING> { exprType = "string"; }
	| "true" { exprType = "true"; }
	| "false" { exprType = "false"; }
	| "this" { exprType = "this"; }
	| "null" { exprType = "null"; } )
	
	{
		if (exprType.equals("newobj")) return new NewObjectExpr(type);
		else if (exprType.equals("newarr")) return new NewArrayExpr(type, exprs);
		else if (exprType.equals("xinu")) return new XinuCallExpr(xinuId.image, exprs);
		else if (exprType.equals("id")) return new IdentifierExpr(terminal.image);
		else if (exprType.equals("int")) return new IntegerLiteral(new Integer(terminal.toString()));
		else if (exprType.equals("string")) return new StringLiteral(terminal.toString());
		else if (exprType.equals("true")) return new TrueExpr();
		else if (exprType.equals("false")) return new FalseExpr();
		else if (exprType.equals("this")) return new ThisExpr();
		else /* null */ return new NullExpr();
	}
}

Expr AssignableExpression() : {
	Expr expr;
	Token id;
} {
	( LOOKAHEAD(2) expr = ArrayExpression()
	| id = <ID> { expr = new IdentifierExpr(id.image); } )

	{ return expr; }
}

// NewDecl ::= "new" Type
Type NewDecl() : {
	Type type;
} {
	"new" type = Type()
	
	{ return type; }
}
